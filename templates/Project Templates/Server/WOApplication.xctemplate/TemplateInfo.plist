<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Kind</key>
    <string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
    
    <key>Identifier</key>
    <string>de.zeezide.dt.unit.swiftxcode.images.swift.swiftobjects</string>

    <key>Ancestors</key>
    <array>
      <string>de.zeezide.dt.unit.spmToolBase</string>
    </array>

    <key>Concrete</key>
    <true/>

    <key>Description</key>
    <string>This template provides a starting point for building SwiftObjects web applications.</string>
    
    <key>Targets</key>
    <array>
      <dict>
        <key>ProductType</key>
        <string>com.apple.product-type.tool</string>
        <key>TargetIdentifier</key>
        <string>com.apple.dt.commandLineToolTarget</string>

        <key>BuildPhases</key>
        <array>
          <dict>
            <key>SortOrder</key><integer>0</integer>
            <key>Name</key>
            <string>Build Swift Package Manager Dependencies</string>
            <key>Class</key>      <string>ShellScript</string>
            <key>ShellPath</key>  <string>/bin/sh</string>
            <key>ShellScript</key>
            <string>SPM_IMAGE=SwiftObjects verbose=no swift xcode build</string>
          </dict>
          <dict><key>Class</key><string>Sources</string>   </dict>
          <dict><key>Class</key><string>Frameworks</string></dict>
        </array>
      </dict>
    </array>
    
    <key>Nodes</key>
    <array>
      <string>Package.swift:spmpackagedecl:deps:SwiftNIO(url: "https://github.com/apple/swift-nio.git", 
                 from: "2.0.0")</string>
      <string>Package.swift:spmpackagedecl:deps:SwiftObjects(url: "https://github.com/SwiftObjects/SwiftObjects.git", 
                 from: "0.6.1")</string>
                 
      <string>Package.swift:spmpackagedecl:targets:default:NIO</string>
      <string>Package.swift:spmpackagedecl:targets:default:SwiftObjects</string>

      <string>Sources/___PACKAGENAME___/main.swift:imports:import:SwiftObjects</string>
      <string>Sources/___PACKAGENAME___/main.swift:body:appstart</string>
      
      <string>Sources/___PACKAGENAME___/Application.swift:header</string>
      <string>Sources/___PACKAGENAME___/Application.swift:imports:import:SwiftObjects</string>
      <string>Sources/___PACKAGENAME___/Application.swift:woappclass</string>
      <string>Sources/___PACKAGENAME___/Application.swift:woappclass:ivars</string>
      <string>Sources/___PACKAGENAME___/Application.swift:woappclass:init:beforesuper</string>
      <string>Sources/___PACKAGENAME___/Application.swift:woappclass:init:super</string>
      <string>Sources/___PACKAGENAME___/Application.swift:woappclass:init:defaultclasses</string>
      <string>Sources/___PACKAGENAME___/Application.swift:woappclass:init:resourcemanager</string>
      <string>Sources/___PACKAGENAME___/Application.swift:woappclass:init:aftersuper</string>

      <string>Sources/___PACKAGENAME___/Context.swift</string>
      <string>Sources/___PACKAGENAME___/Session.swift</string>
      
      <string>Sources/___PACKAGENAME___/Components/Main.swift</string>
      <string>Sources/___PACKAGENAME___/Components/Main.html</string>
      <string>Sources/___PACKAGENAME___/Components/Main.wod</string>
      <string>Sources/___PACKAGENAME___/Components/Frame.html</string>

      <string>Sources/___PACKAGENAME___/DirectAction.swift</string>
      
      <string>Sources/___PACKAGENAME___/favicon.ico</string>
    </array>
    
    
    <!-- ***************************************************** -->

    <key>Definitions</key>
    <dict>
      <key>Sources/___PACKAGENAME___/main.swift</key>
      <dict>
        <!-- need to differentiate between main.swift and the Main component -->
        <key>Group</key><array><string>Application</string></array>
        <key>Path</key><string>MainEntry.swift</string>
      </dict>
      <key>Sources/___PACKAGENAME___/main.swift:body:appstart</key>
      <string>let WOApp  = Application()
let server = WONIOAdaptor(application: WOApp)
server.listenAndWait()</string>
      
      <key>Sources/___PACKAGENAME___/Application.swift</key>
      <dict>
        <key>Group</key><array><string>Application</string></array>
        <key>Path</key><string>Application.swift</string>
      </dict>

      <key>Sources/___PACKAGENAME___/Application.swift:header</key>
      <string>//___FILEHEADER___
</string>
      
      <key>*:woappclass</key>
      <dict>
        <key>Beginning</key>
        <string>/**
 * The application object is what the name suggests, it represents the
 * application :-)
 *
 * It isn't the actual HTTP server (that is handled by the `WOAdaptor`),
 * but it performs a variety of tasks, including request path handling,
 * some session management, etc.
 *
 * *Important*: Due to missing reflection capabilities in Swift, you need
 *              to explicitly expose the component classes you want to use!
 *              As shown below in the init method.
 */
final class Application : WOApplication {</string>
        <key>End</key>
        <string>}</string>
      </dict>
      <key>*:woappclass:init</key>
      <dict>
        <key>Beginning</key>
        <string>
    override init() {</string>
        <key>End</key>
        <string>    }</string>
      </dict>
      <key>*:woappclass:init:beforesuper</key>
      <string></string>
      <key>*:woappclass:init:super</key>
      <string>        super.init()</string>
      <key>*:woappclass:init:defaultclasses</key>
      <string>
        // Make SwiftObjects use our own subclasses.
        contextClass = Context.self
        sessionClass = Session.self</string>
      <key>*:woappclass:init:resourcemanager</key>
      <string>
        // The resource manager maintains all resources, that is, templates,
        // components, images, etc.
        let rm = WODevResourceManager(sourceType: Application.self,
                                      defaultFramework: "___PACKAGENAMEASIDENTIFIER___")

        // Here we need to tell the resource manager about our classes.
        // Note: `Frame` is missing here, because it is a component w/o an 
        //       explicit class.
        rm.register(Session.self,
                    Context.self,
                    DirectAction.self,
                    Main.self)

        // Tell SwiftObjects to use the resource manager we just created.    
        resourceManager = rm</string>
      <key>*:woappclass:init:aftersuper</key>
      <string></string>
      
      <key>Sources/___PACKAGENAME___/Context.swift</key>
      <dict>
        <key>Group</key><array><string>Application</string></array>
        <key>Path</key><string>Context.swift</string>
      </dict>
      <key>Sources/___PACKAGENAME___/Session.swift</key>
      <dict>
        <key>Group</key><array><string>Application</string></array>
        <key>Path</key><string>Session.swift</string>
      </dict>
      
      <key>Sources/___PACKAGENAME___/Components/Main.swift</key>
      <dict>
        <key>Group</key><array><string>Components</string></array>
        <key>Path</key><string>Main.swift</string>
      </dict>
      <key>Sources/___PACKAGENAME___/Components/Main.html</key>
      <dict>
        <key>Group</key><array><string>Components</string></array>
        <key>Path</key><string>Main.html</string>
      </dict>
      <key>Sources/___PACKAGENAME___/Components/Main.wod</key>
      <dict>
        <key>Group</key><array><string>Components</string></array>
        <key>Path</key><string>Main.wod</string>
      </dict>

      <key>Sources/___PACKAGENAME___/Components/Frame.html</key>
      <dict>
        <key>Group</key><array><string>Components</string></array>
        <key>Path</key><string>Frame.html</string>
      </dict>

      <key>Sources/___PACKAGENAME___/DirectAction.swift</key>
      <dict>
        <key>Group</key><array><string>DirectActions</string></array>
        <key>Path</key><string>DirectAction.swift</string>
      </dict>
      
      <key>Sources/___PACKAGENAME___/favicon.ico</key>
      <dict>
        <key>Group</key><array><string>WebServerResources</string></array>
        <key>Path</key><string>favicon.ico</string>
      </dict>
    </dict>


    <!-- *************** OPTIONS ********************************* -->
    <!-- TODO: make ZeeQL an option, not a direct link -->
    <key>Options</key>
    <array>
      <dict>
        <key>Identifier</key>   <string>zzSemanticUI</string>
        <key>Name</key>         <string>Include the SemanticUI and jQuery JavaScript/CSS frameworks.</string>
        <key>Description</key>
        <string>Add the SemanticUI and jQuery resources.</string>
        
        <key>SortOrder</key>    <integer>20</integer>
        <key>Type</key>         <string>checkbox</string>
        <key>Default</key>      <string>true</string>
        <key>NotPersisted</key> <true/>
        
        <key>Units</key>
        <dict>
          <key>true</key>
          <array>
            <dict>
              <key>Nodes</key>
              <array>
                <string>Package.swift:spmpackagedecl:deps:SemanticUI(url: "https://github.com/SwiftWebResources/SemanticUI-Swift.git", 
                           from: "2.3.1")</string>
                <string>Package.swift:spmpackagedecl:deps:jQuery(url: "https://github.com/SwiftWebResources/jQuery-Swift.git", 
                           from: "3.3.1")</string>
                <string>Package.swift:spmpackagedecl:targets:default:SemanticUI</string>
                <string>Package.swift:spmpackagedecl:targets:default:jQuery</string>
                
                <string>Sources/___PACKAGENAME___/Application.swift:imports:import:jQuery</string>
                <string>Sources/___PACKAGENAME___/Application.swift:imports:import:SemanticUI</string>
              </array>
              <key>Definitions</key>
              <dict>
                <key>*:woappclass:init:resourcemanager</key>
                <string>
        // The resource manager maintains all resources, that is, templates,
        // components, images, etc.
        let rm = WODevResourceManager(sourceType: Application.self,
                                      defaultFramework: "___PACKAGENAMEASIDENTIFIER___")
        
        // Here we need to tell the resource manager about our classes.
        // Note: `Frame` is missing here, because it is a component w/o an 
        //       explicit class.
        rm.register(Session.self,
                    Context.self,
                    DirectAction.self,
                    Main.self)
    
        // We also expose some useful SwiftWebResources
        rm.expose(.init("jQuery.min.js",    jQuery.data_jquery_min_js),
                  .init("semantic.min.js",  SemanticUI.data_semantic_min_js),
                  .init("semantic.min.css", SemanticUI.data_semantic_min_css))

        // Tell SwiftObjects to use the resource manager we just created.    
        resourceManager = rm</string>
              </dict>
            </dict>
          </array>
        </dict>
      </dict>
      <dict>
        <key>Identifier</key>   <string>zzZeeQLBridge</string>
        <key>Name</key>         <string>Include the ZeeQL module.</string>
        <key>Description</key>
        <string>Add the EOF/CoreData like ZeeQL module.</string>
        
        <key>SortOrder</key>    <integer>31</integer>
        <key>Type</key>         <string>checkbox</string>
        <key>Default</key>      <string>true</string>
        <key>NotPersisted</key> <true/>
        
        <key>Units</key>
        <dict>
          <key>true</key>
          <array>
            <dict>
              <key>Nodes</key>
              <array>
                <string>Package.swift:spmpackagedecl:deps:ZeeQL(url: "https://github.com/ZeeQL/ZeeQL3.git", 
                           from: "0.7.0")</string>
                <string>Package.swift:spmpackagedecl:deps:SwiftObjectsZeeQLBridge(url: "https://github.com/SwiftObjects/SwiftObjectsZeeQLBridge.git",
                           from: "0.1.0")</string>
                <string>Package.swift:spmpackagedecl:targets:default:ZeeQL</string>
                <string>Package.swift:spmpackagedecl:targets:default:SwiftObjectsZeeQLBridge</string>
                
                <string>Sources/___PACKAGENAME___/main.swift:imports:import:SwiftObjectsZeeQLBridge</string>
                
                <string>Sources/___PACKAGENAME___/Application.swift:imports:import:ZeeQL</string>
                <string>Sources/___PACKAGENAME___/Context.swift:imports:import:ZeeQL</string>
                <string>Sources/___PACKAGENAME___/Session.swift:imports:import:ZeeQL</string>
                <string>Sources/___PACKAGENAME___/Components/Main.swift:imports:import:ZeeQL</string>
                <string>Sources/___PACKAGENAME___/DirectAction.swift:imports:import:ZeeQL</string>
              </array>
            </dict>
          </array>
        </dict>
      </dict>
      <dict>
        <key>Identifier</key>   <string>zzZeeQLSQLiteDemo</string>
        <key>Name</key>         <string>Setup SQLite3 demo database.</string>
        <key>Description</key>
        <string>Setup a sample SQLite configuration.</string>
        
        <key>SortOrder</key>    <integer>35</integer>
        <key>Type</key>         <string>checkbox</string>
        <key>Default</key>      <string>true</string>
        <key>NotPersisted</key> <true/>
        
        <key>Units</key>
        <dict>
          <key>true</key>
          <array>
            <dict>
              <key>Nodes</key>
              <array>
                <string>Sources/___PACKAGENAME___/contacts.sqlite3</string>
                <string>Sources/___PACKAGENAME___/Application.swift:woappclass:ivars:ivar:database</string>
                <string>Sources/___PACKAGENAME___/Application.swift:woappclass:init:beforesuper</string>
              </array>
              <key>Definitions</key>
              <dict>
                <key>Sources/___PACKAGENAME___/contacts.sqlite3</key>
                <dict>
                  <key>Group</key><array><string>Databases</string></array>
                  <key>Path</key><string>contacts.sqlite3</string>
                </dict>
                <key>Sources/___PACKAGENAME___/Application.swift:woappclass:ivars:ivar:database</key>
                <string>
    let database : Database</string>
              </dict>
              <key>*:woappclass:init:beforesuper</key>
              <string>
        let dbPath  = "contacts.sqlite3"
        let adaptor = SQLite3Adaptor(dbPath)
        self.db = Database(adaptor: adaptor)
        if let model = (try? adaptor.fetchModel())
                             .flatMap({ FancyModelMaker(model: $0).fancyfyModel() })
        {
            adaptor.model = model
        }</string>
            </dict>
          </array>
        </dict>
      </dict>
    </array>

  </dict>
</plist>
